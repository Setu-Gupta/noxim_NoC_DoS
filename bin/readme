Traffic table format
src	dst	pir	por	t_on	t_off	t_period	payload_type	payload_data

Note: src and dst are compulsory
default values:
	pir:	0.01
	por: 	0.01
	t_on:	0
	t_off:	reset_time + simulation_time
	t_period:	reset_time + simulation_time
	payload_type:	0
	payload_data:	-1 (Only valid if payload_type is write)

refer to conventions to see payload_type values

To send a single packet at cycle c, set t_on = c-1, t_off = c+1, t_period = reset_time + simulation_time
The behavior repeats after t_period as packets are sent by first taking current_cycle%t_period.

----------------------------------------------------------------------------------------------------

Test files

2_packets	: sends exactly two packets
single_packet	: sends exactly one packet
memory		: performs a mix of reads and writes
repeated_packets: repeatedly sends default packets between two nodes
repeated_reads	: repeatedly sends read requests along with one write request. Initial read requests fail but subsequent requests succeed.
attack		: This set contains 3 files
			only_attack	: This just initiates a cycle of packets between nodes 0 and 3
			only_com	: This models general communication between two nodes
			attack_and_com	: This models general communication in presence of an ongoing attack
attack2		: This set contains files
			6accelkmp.txt0_1.txt			: This models normal communication in network
			6accelkmp.txt0_1.txt_with_attack	: This models attack along side normal communication.
traffic_table	: This is a model set of files for various scenarios.
to_test		: files on root		: This is a model set of files for various scenarios. In all the files pir = 0, hence no packet is generated.
		  generated_files/. 	: This directory contains updated versions of previous files with revised pir value.
		  generated_files/with_attack	: This directory has copies of all the previos files with attack scenario.
		  FFT_pir/.		: This directory has multiple variants of Noxim_SplashFFT_64.txt with various pir values.
		  			  The naming convention if FFT_<pir value>
		  FFT_pir/with_attack	: This directory has copies of all the previos files with attack scenario.
		  FFT_pir_por		: This directory has all the previous files but with por = pir.
		  FFT_pir_por/with_attack	: Same as before
full_communication	: This contains files and corresponding logs for tables representing full communication (Explained below).

-----------------------------------------------------------------------------------------------------

Tools

field_modier.py	: Location 	-> (installation root)/tools/.
		  Dependencies	-> python3 (3.2+)
		  		   os.path for python3
		  Function	-> Interactive tool to modify fields of traffic_table
		  Usage		-> (Interactive) Follow the prompt instructions
		  How to run	-> On shell enter the following command "python3 path/to/field_modifier.py"
		  Notes		-> The paths entered in the tool, if relative, are considered w.r.t directory of the .py file

create_full_comm_table.py	: Location 	-> (installation root)/tools/.
		  		  Dependencies	-> python3 (3.2+)
		  		  Function	-> Interactive tool to generate traffic_table with full communication.
				  		   Full communication refers to every node communication with every other node on every cycle.
		  		  Usage		-> The tools takes 3 arguments. These are
				  		   Arg 1: x dimension of mesh network
				  		   Arg 2: y dimension of mesh network
						   Arg 3: Simulation time (in cycles)
		  		  How to run	-> On shell enter the following command
				  			"python3 path/to/field_modifier.py arg1 arg2 arg3 > output_file".
				  		   Replace arg1 with value for arg1 and so on...

run_noxim.sh			: Location 	-> (installation root)/tools/.
		  		  Dependencies	-> bash
		  		  Function	-> Tool to run noxim on various files as specified in path (in the .sh file)
				  Usage		-> Execute directly on any bash compatible shell
				  Notes		-> If the file doesn't have execute permissions, first do "chmod +x path/to/.sh/file"

perceptron.sh			: Location 	-> (installation root)/tools/.
		  		  Dependencies	-> python3
		  		  Function	-> Tool train and test perceptron to predict whether data a port is congested
		  		  How to run	-> On shell enter the following command
				  			"python3 path/to/field_modifier.py path/to/feature/file".
						   Or
				  			"python3 path/to/field_modifier.py path/to/unsaturated/feature/file path/to/saturated/feature/file".
				  Notes		-> The script generates a file in the same directory from which it was ran called "training_report".
				  		   This is a csv file which has weights and baises for various router and ports.
						   The details and format can be found in the script itself.

-----------------------------------------------------------------------------------------------------

Change log

Utils.h
	Added display for flit payload in template

DataStructs.h
	Added type field in Payload
	Payload now has type and data. Refer to GloablParams.h for valid types.
	Modified == operator for Payload
	Added Payload to Flit
	Added rx_cycle to Flit
	Added payload to Packet
	Modified constructor and make() for struct Packet to include Payload

GlobalParams.h
	Added #define for Payload types. Lines [93, 97]

GlobalTrafficTable.h
	Added Payload field to struct Communication
	Modified signature of getCumulativePirPor to include Payload

GlobalTrafficTable.cpp
	Modified load() method to incorporate additional payload related fields. Lines [37, 41] and [86, 99]
	Modified signature of getCumulativePirPor() to match the .h file
	Modified lines [126, 128] in getCumulativePirPor() to store Payload also along with destination and cpirnpor


ProcessingElement.h
	Added 2 more registers to PE: dataAvailable and data.
	dataAvailble is a flag initially set to false. After a write, it is flipped to true.
	data is a integer to store the data in PE. It is initially set to -1. It is updated every time a write is made.
	Added declaration of 6 new functions. Lines [65, 69]. Refer to ProcessingElement.cpp for details.

ProcessingElement.cpp
	modified rxprocess() line 24 to initialize dataAvailable to false during reset
	modified rxprocess() line 28 to call receive() to handle requests
	modified txprocess() line 41 to initialize data to -1 during reset phase
	modifed nextFlit() to add Payload from packet to flit of the same packet and to update LOG for malicious packet
	modified data type of dst_prob in canShot() to include Payload field. Line 153
	modifed canShot() lines [161, 164] to include support for Payload
	Implemented receive()
		receive only works on the last flit in packet i.e. TAIL_FLIT.
		Depending on the type in the payload of flit, one of the following methods are called. These are described below.
	Implemented handleDefault()
		handleDefault() is used when the payload type is default or not reserved. Nothing special needs to be done.
		These packets represent normal communication packets. No memory operations are performed.
		Information is about the flit is added to LOG.
	Implemented handleWrite()
		Sets dataAvailable to true.
		Updates data and entry is added to LOG.
	Implemented handleReadReq()
		If dataAvailable is false, request is ignored
		Else a new packet is created with Payload having data as data value of PE. This packet is then pushed to packet_queue.
		LOG is updated accordingly
	Implemented handleReadReply()
		LOG is updated to specify the data received
	Implemented handleAttack()
		This method is called when a malicious packet is received by the PE.
		This generates a continuous cycle between the source of the packet and local PE.
		Local PE sends a new malicious packet to source and the cycle continues.

Stats.h
	Modified struct CommHistory to include normal fields i.e. field exclusively for non malicious packets.
	Added following declaration for non malicious packet statistics
	Added getAverageDelayNormal(int) declaration
	Added getAverageDelayNormal() declaration
	Added getMaxDelayNormal(int) declaration
	Added getMaxDelayNormal() declaration
	Added getReceivedPacketsNormal() declaration
	Added getReceivedFlitsNormal() declaration

Stats.cpp
	Added implementation for methods used for non malicious packet statistics
	Added getAverageDelayNormal(int) implementation
	Added getAverageDelayNormal() implementation
	Added getMaxDelayNormal(int) implementation
	Added getMaxDelayNormal() implementation
	Added getReceivedPacketsNormal() implementation
	Added getReceivedFlitsNormal() implementation

GlobalStats.h
	Added following declaration for non malicious packet statistics
	Added getReceivedPacketsNormal() declaration
	Added getReceivedFlitsNormal() declaration
	Added getAverageDelayNormal() declaration
	Added getMaxDelayNormal() declaration
	Added getMaxDelayNormal(int) declaration
	

GlobalStats.cpp
	Added implementation for methods used for non malicious packet statistics
	Added getAverageDelayNormal() implementation
	Added getMaxDelayNormal() implementation
	Added getMaxDelayNormal(int) implementation
	Added getReceivedPacketsNormal() implementation
	Added getReceivedFlitsNormal() implementation
	Modified showStats() to show non malicious stats as well

Main.cpp
	Added declaration for FeatureCollector
	Added function call for FeatureCollector to export statistics

FeatureCollector.cpp (Added)
	Added definition for testPrint method
	Added definition for exportFeatures

FeatureCollector.h (Added)
	Added definitions for FeatureCollector class
	Added definitions for Feature and port_feature struct
	
NoC.h
	Added FeatureCollector in NoC
	Changed the format of constructor to accept FeatureCollector as a parameter

NoC.cpp
	Added code to set FeatureCollector i.e. fc of each router

Router.h
	Imported FeatureCollector.h
	Added FeatureCollector to Router
	Added declaration of write_features() method
	Added declaration for current_features and features_set_up

Router.cpp
	Added code to update FeatureCollector in rxProcess()
	Added definition for write_features()
	Added code in rxProcess() in reset as well as normal part to initialize and update features respectively.

-----------------------------------------------------------------------------------------------------

Description of attack:
	The attack is continuous back and forth of packets between two PEs.
	The initial packet is sent from src to dst as specified by the traffic table entry.
	The following reply and requests are made automatically in code.
	This generates a constant back and forth. The attack proceeds as follows.
		1. PE1 sends packet to PE2.
		2. This triggers PE2 to reply back PE1 with another malicious packet
		3. This reply packet then triggers PE1 to again send a packet to PE2.
		4. Attack follows from step 2
	This generates lots of packets packets in the network. These packets compete with non malicious packets for resources.
	As a result the non malicious packets face delays.
	Also to increase the effectiveness of attack, the attack is pipelined.
	This means that packets are inserted into packet_queue every cycle starting from the first packetr as specified in traffic table till the first malicious reply.

-----------------------------------------------------------------------------------------------------

To run:

Go /bin
./noxim -topology MESH -dimx 2 -dimy 2 -traffic table <insert table here> -config ./../personal_configs/my_config.yaml  > log_test

-----------------------------------------------------------------------------------------------------

Reports:

Reports for various test cases are stored in this directory.

-----------------------------------------------------------------------------------------------------

Pitfalls:

The current version of makefile might not be able to handle dependencyies on .h files. As a result modifying .h files may not result in compilation. If header files are modifie, make sure that all files which import the said header file are re-compiled.

-----------------------------------------------------------------------------------------------------

Features file

This is a csv file which has all the features.
Details regading the format can be found in FeatureCollector.h::struct Feature::print()

-----------------------------------------------------------------------------------------------------

perceptron_data

This directory contains files used and generated by perceptron.py tool (Described above)
The structure is:
benchmark_name/traffic_tables/*	:	This directory has traffic files for attack and non attack scenarios
benchmark_name/feature/*	:	This directory has feature files for attack and non attack scenarios
benchmark_name/training_report	:	This directory has the training report generated by the tool

merged becnchmark has the feature files for Barnes, FFT and Radix benchmark at pir = por = 0.00001 appended.
